.wheel{
    border: 2px solid black;
    border-radius: 50%;
    margin-left: 50px;
    position: absolute;
    height: 55vw;
    width: 55vw;
    max-height: 500px;
    max-width: 500px;
    animation-duration: 10s;
    animation-name: wheel;
  /* The animation-iteration-count property sets how many times your animation should repeat. This can be set to a number, or to infinite to indefinitely repeat the animation. Your Ferris wheel should never stop, so set the .wheel selector to have an animation-iteration-count of infinite.*/
  /* The animation-timing-function property sets how the animation should progress over time. There are a few different values for this property, but you want the Ferris wheel animation to run at the same rate from start to finish. Set the animation-timing-function to linear in your .wheel selector.*/
  animation-iteration-count:  infinite;
  animation-timing-function:  linear;
    
}
.line{
    background-color: black;
    width: 50%;
    height: 2px;
    position: absolute;
    left: 50%;
/* The transform-origin property is used to set the point around which a CSS transformation is applied. For example, when performing a rotate (which you will do later in this project), the transform-origin determines around which point the element is rotated. */    
    top: 50%;
 /* This will offset the origin point by 0% from the left and 0% from the top, setting it to the top left corner of the element.*/   
    transform-origin: 0% 0%;
}
/* Remember that the transform property allows you to manipulate the shape of an element. In this case, using the rotate(60deg) value will rotate the element around its transform-origin point by 60 degrees clockwise.*/
/* Create a selector to target your second .line element. Set the transform property to rotate(60deg).*/
.line:nth-of-type(2){
    transform: rotate(60deg);
}
.line:nth-of-type(3){
    transform: rotate(120deg);
}
.line:nth-of-type(4){
    transform: rotate(180deg);
}
.line:nth-of-type(5){
    transform: rotate(240deg);
}
.line:nth-of-type(6){
    transform: rotate(300deg);
}
.cabin{
    background-color: red;
    width: 20%;
    height: 20%;
    position: absolute;
    border: 2px solid;
/* This will set the origin point to be offset 50% from the left and 0% from the top, placing it in the middle of the top edge of the element.*/    
    transform-origin: 50% 0%;
    animation: cabins 10s ease-in-out infinite;
/* To make your cabin animation seem more like a natural swinging motion, you can use the ease-in-out timing function. This setting will tell the animation to start and end at a slower pace, but move more quickly in the middle of the cycle.*/
}
.cabin:nth-of-type(1){
    right: -8.5%;
    top: 50%;
}
.cabin:nth-of-type(2){
    right: 17%;
    top: 93.5%;
}
.cabin:nth-of-type(3){
    right: 67%;
    top: 93.5%;
}
.cabin:nth-of-type(4){
    left: -8.5%;
    top: 50%;
}
.cabin:nth-of-type(5){
    left: 17%;
    top: 7%;
}
.cabin:nth-of-type(6){
    right: 17%;
    top: 7%;
}
/* The @keyframes at-rule is used to define the flow of a CSS animation. Within the @keyframes rule, you can create selectors for specific points in the animation sequence, such as 0% or 25%, or use from and to to define the start and end of the sequence.*/
@keyframes wheel{
/* You now need to define how your animation should start. To do this, create a 0% rule within your @keyframes wheel rule. The properties you set in this nested selector will apply at the beginning of your animation.*/
     0%{
        transform:  rotate(0deg);
    } 
    100% {
        transform: rotate(360deg);
    }        
}
@keyframes cabins{
    /* You now need to define how your animation should start. To do this, create a 0% rule within your @keyframes wheel rule. The properties you set in this nested selector will apply at the beginning of your animation.*/
         0%{
            transform:  rotate(0deg);
/* Because the animation is on an infinite loop and the start and end colors are not the same, the transition appears jerky when it switches back to yellow from red.*/            
        } 
        25%{
            background-color: purple;
        }
        50%{
          background-color: yellow;
        }
        75%{
            background-color: purple;
        }
        100% {
            transform: rotate(-360deg);
        }   
             
}
